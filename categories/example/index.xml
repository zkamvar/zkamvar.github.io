<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Example on Zhian N. Kamvar</title>
    <link>https://zkamvar.github.io/categories/example/</link>
    <description>Recent content in Example on Zhian N. Kamvar</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 18 Jun 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://zkamvar.github.io/categories/example/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>nice selection</title>
      <link>https://zkamvar.github.io/blog/nice-selection/</link>
      <pubDate>Tue, 18 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://zkamvar.github.io/blog/nice-selection/</guid>
      <description>I started writing in R before the tidyverse became a thing and I never really had to think about non-standard evaluation when writing functions. Those days are long past and I‚Äôve recently struggled with the challenge when writing functions for the R4EPIs project, which would stick out like ugly little trolls along side tidyverse functions.
One of my biggest struggles was trying to figure out how, excactly to select a varaible from a user as either a character string or a bare variable.</description>
    </item>
    
    <item>
      <title>Splitting Hairs: *poppr* version 2.7</title>
      <link>https://zkamvar.github.io/blog/poppr-2-7/</link>
      <pubDate>Fri, 16 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://zkamvar.github.io/blog/poppr-2-7/</guid>
      <description>Positive Contact This version of poppr is a direct result of feedback that was prompted by my own feedback.
I‚Äôm always grateful for eagle-eyed users of poppr who report when things are going awry. Recently, I had noticed that poppr was cited in a recent review on the analysis of polyploid genetic data (Meirmans, Liu, and Tienderen 2018) that highlighted some limitations with established methods, including Bruvo‚Äôs distance (Bruvo et al.</description>
    </item>
    
    <item>
      <title>Poppr 2.6.0: Better Network Plotting</title>
      <link>https://zkamvar.github.io/blog/poppr-2-6-0-better-network-plotting/</link>
      <pubDate>Thu, 11 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://zkamvar.github.io/blog/poppr-2-6-0-better-network-plotting/</guid>
      <description>Poppr version 2.6.0 has officially been released on CRAN and should be built for all operating systems within the next few days üéâ. You can check out the NEWS for full details. This release features a new function called boot.ia() to assess how the Index of Association responds to repeat observations (clones). Perhaps the biggest feature is the change in how minimum spanning networks are plotted.
Minimum spanning networks were originally implemented in poppr by Javier Tabima and I, and since then they‚Äôve gone through some tweaking, eventually including features like reticulation of equivalent paths and a GUI to help construct these networks.</description>
    </item>
    
    <item>
      <title>Using a custom library in R</title>
      <link>https://zkamvar.github.io/blog/using-a-custom-library-in-r/</link>
      <pubDate>Sat, 18 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://zkamvar.github.io/blog/using-a-custom-library-in-r/</guid>
      <description>I‚Äôve been using a custom library for R since 2012 and I‚Äôve never looked back. I‚Äôve not seen many tutorials for people do do this through R, so I figured I‚Äôd write a quick one.
Where does your R package library live? You can usually find this out by typing .libPaths() in your R console. If you have an out-of-the-box installation, it will generally be somewhere like:
C:/Program Files/R/R-3.4.2/library or</description>
    </item>
    
    <item>
      <title>Installing the ABySS</title>
      <link>https://zkamvar.github.io/blog/installing-the-abyss/</link>
      <pubDate>Thu, 05 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://zkamvar.github.io/blog/installing-the-abyss/</guid>
      <description>A couple of weeks ago, I wanted to explore assembling 55 genomes of Sclerotinia sclerotiorum to check for structural rearrangements that could be caused by sub-lethal fungicide exposure. I figured the best way to do this was to assemble these genomes de novo as opposed to aligning them to a reference. This brought me to installing the ABySS de novo assembler on the HCC Tusker Cluster‚Ä¶ and I can happily report, that after half a day of command line bullshittery1, I had ABySS up and running üëç.</description>
    </item>
    
    <item>
      <title>Recreating Figure 3</title>
      <link>https://zkamvar.github.io/blog/recreating-figure-3/</link>
      <pubDate>Wed, 10 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>https://zkamvar.github.io/blog/recreating-figure-3/</guid>
      <description>Motivation In February of 2016, I got an email asking if I could provide the code to recreate figure three from my article in Phytopathology on the outbreak of Phytophthora ramorum in Curry County OR from 2001 to 2014 (paywalled, but you can find a copy here).
While I have the code used for the analysis on github, it‚Äôs a lot of stuff to sort through, considering that it was my first foray in attempting a reproducible analysis, so for this post, I‚Äôm going to recreate it using current tools.</description>
    </item>
    
  </channel>
</rss>